<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<bean id="presence.pro.check.binding" class="com.sissi.pipeline.in.presence.PresenceCheckBindingProcessor" />
	<bean id="presence.pro.check.exists" class="com.sissi.pipeline.in.presence.PresenceCheckExistsProcessor" parent="global.pro.proxy">
		<constructor-arg ref="vcard" />
	</bean>
	<bean id="presence.pro.check.loop" class="com.sissi.pipeline.in.presence.PresenceCheckLoopProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence" />
	</bean>
	<bean id="presence.pro.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.check.binding" />
				<ref bean="global.pro.check" />
				<ref bean="presence.pro.check.exists" />
				<ref bean="presence.pro.check.loop" />
				<ref bean="presence.pro.fork" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.probe.relation" class="com.sissi.pipeline.in.presence.probe.PresenceProbeRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.status.offline" class="com.sissi.pipeline.in.presence.probe.PresenceProbeOfflineStatusProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.status.online" class="com.sissi.pipeline.in.presence.probe.PresenceProbeOnlineStatusProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.probe.relation" />
				<ref bean="presence.pro.probe.status.offline" />
				<ref bean="presence.pro.probe.status.online" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.status.available.init.4fans" class="com.sissi.pipeline.in.presence.status.PresenceInit4FansProcessor" parent="global.pro.proxy">
		<property name="presenceQueue" ref="broadcast.presence.self" />
	</bean>
	<bean id="presence.pro.status.available.init.4selfs" class="com.sissi.pipeline.in.presence.status.PresenceInit4SelfsProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.init.4offline" class="com.sissi.pipeline.in.presence.status.PresenceInit4OfflineProcessor">
		<constructor-arg ref="offline" />
	</bean>
	<bean id="presence.pro.status.available.2self.priority" class="com.sissi.pipeline.in.presence.status.PresenceOnlinePriorityProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.2self.update" class="com.sissi.pipeline.in.presence.status.PresenceOnlineUpdateProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.2selfs" class="com.sissi.pipeline.in.presence.status.PresenceOnlineProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.2fans" class="com.sissi.pipeline.in.presence.status.PresenceOnlineProcessor" parent="global.pro.proxy">
		<property name="protocolQueue" ref="broadcast.protocol.fans" />
	</bean>
	<bean id="presence.pro.status.available.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.status.available.init.4fans" />
				<ref bean="presence.pro.status.available.init.4selfs" />
				<ref bean="presence.pro.status.available.init.4offline" />
				<ref bean="presence.pro.status.available.2self.priority" />
				<ref bean="presence.pro.status.available.2self.update" />
				<ref bean="presence.pro.status.available.2selfs" />
				<ref bean="presence.pro.status.available.2fans" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.status.unavailable" class="com.sissi.pipeline.in.presence.status.PresenceLeaveProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribeProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2presence.route" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2PresenceRouteProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2presence.reply" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2PresenceReplyProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.roster.subscribe.2presence.reply" />
				<ref bean="presence.pro.roster.subscribe.2presence.route" />
				<ref bean="presence.pro.roster.subscribe" />
				<ref bean="presence.pro.roster.subscribe.2item" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.unsubscribed" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribedProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribed2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.2presence" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribed2PresenceProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribedCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.roster.unsubscribed.check" />
				<ref bean="presence.pro.roster.unsubscribed" />
				<ref bean="presence.pro.roster.unsubscribed.2item" />
				<ref bean="presence.pro.roster.unsubscribed.2presence" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.subscribed" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribedProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribedCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribed2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.2presence" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribed2PresenceProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.roster.subscribed.check" />
				<ref bean="presence.pro.roster.subscribed" />
				<ref bean="presence.pro.roster.subscribed.2item" />
				<ref bean="presence.pro.roster.subscribed.2presence" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.unsubscribe" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribeProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribe2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.2presence.selfs" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribe2PresenceSelfsProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.2presence.fans" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribe2PresenceFansProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribeCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="presence.pro.roster.unsubscribe.check" />
				<ref bean="presence.pro.roster.unsubscribe" />
				<ref bean="presence.pro.roster.unsubscribe.2item" />
				<ref bean="presence.pro.roster.unsubscribe.2presence.selfs" />
				<ref bean="presence.pro.roster.unsubscribe.2presence.fans" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence.roster" />
	</bean>
	<bean id="presence.pro.status.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence.status" />
	</bean>

	<bean id="finder.presence" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.probe" />
				<ref bean="presence.condition.status" />
				<ref bean="presence.condition.roster" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="finder.presence.status" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.status.available" />
				<ref bean="presence.condition.status.unavailable" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="finder.presence.roster" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.roster.subscribe" />
				<ref bean="presence.condition.roster.subscribed" />
				<ref bean="presence.condition.roster.unsubscribe" />
				<ref bean="presence.condition.roster.unsubscribed" />
			</util:list>
		</constructor-arg>
	</bean>

	<bean id="presence.condition" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.ClassMatcher">
				<constructor-arg value="com.sissi.protocol.presence.Presence" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.chained" />
	</bean>
	<bean id="presence.condition.probe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.probe.PresenceProbeMatcher" />
		</constructor-arg>
		<constructor-arg ref="presence.pro.probe.chained" />
	</bean>
	<bean id="presence.condition.status" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.status.PresenceActionMatcher">
				<constructor-arg>
					<array>
						<null />
						<value>UNAVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.fork" />
	</bean>
	<bean id="presence.condition.status.available" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.status.PresenceActionMatcher" />
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.available.chained" />
	</bean>
	<bean id="presence.condition.status.unavailable" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.status.PresenceActionMatcher">
				<constructor-arg>
					<array>
						<value>UNAVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.unavailable" />
	</bean>
	<bean id="presence.condition.roster" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.AnyMatcher" />
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.fork" />
	</bean>
	<bean id="presence.condition.roster.unsubscribe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="unsubscribe" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.unsubscribe.chained" />
	</bean>
	<bean id="presence.condition.roster.unsubscribed" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="unsubscribed" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.unsubscribed.chained" />
	</bean>
	<bean id="presence.condition.roster.subscribed" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="subscribed" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.subscribed.chained" />
	</bean>
	<bean id="presence.condition.roster.subscribe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="subscribe" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.subscribe.chained" />
	</bean>

</beans>
