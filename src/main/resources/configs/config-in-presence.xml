<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<bean id="presence.pro.check.binding" class="com.sissi.pipeline.in.presence.PresenceCheckBindingProcessor" />
	<bean id="presence.pro.check.loop" class="com.sissi.pipeline.in.presence.PresenceCheckLoopProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.check.type" class="com.sissi.pipeline.in.presence.PresenceCheckTypeProcessor" />
	<bean id="presence.pro.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence" />
	</bean>
	<bean id="presence.pro.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<ref bean="global.pro.check.chained" />
				<!-- After binding -->
				<ref bean="presence.pro.check.binding" />
				<!-- Check presence type -->
				<ref bean="presence.pro.check.type" />
				<!-- Prevent to self -->
				<ref bean="presence.pro.check.loop" />
				<ref bean="presence.pro.fork" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.probe.relation" class="com.sissi.pipeline.in.presence.probe.PresenceProbeRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.status.offline" class="com.sissi.pipeline.in.presence.probe.PresenceProbeOfflineStatusProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.status.online" class="com.sissi.pipeline.in.presence.probe.PresenceProbeOnlineStatusProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.probe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Check relation -->
				<ref bean="presence.pro.probe.relation" />
				<!-- Presence unavailable when offline -->
				<ref bean="presence.pro.probe.status.offline" />
				<!-- Presence probe when online -->
				<ref bean="presence.pro.probe.status.online" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.status.2selfs" class="com.sissi.pipeline.in.presence.status.PresenceStatusProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.2fans" class="com.sissi.pipeline.in.presence.status.PresenceStatusProcessor" parent="global.pro.proxy">
		<property name="protocolQueue" ref="broadcast.protocol.fans" />
	</bean>
	<bean id="presence.pro.status.forward" class="com.sissi.pipeline.in.presence.status.PresenceForwardProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.forward.route" class="com.sissi.pipeline.in.presence.status.PresenceForwardRouteProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.forward.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Nothing, experiment -->
				<ref bean="presence.pro.status.forward" />
				<ref bean="presence.pro.status.forward.route" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.status.available.muc" class="com.sissi.pipeline.in.presence.status.PresenceOnlineMucProcessor" parent="global.pro.proxy">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.ChainedProcessor">
				<constructor-arg value="true" />
				<constructor-arg>
					<util:list>
						<ref bean="presence.pro.muc.check.xmlns" />
						<ref bean="presence.pro.muc.check.nickname" />
						<ref bean="presence.pro.muc.join" />
						<ref bean="presence.pro.muc.join.2fans" />
					</util:list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<property name="relationContext" ref="relation.muc" />
	</bean>
	<bean id="presence.pro.status.available.init.4ask" class="com.sissi.pipeline.in.presence.status.PresenceInit4AskProcessor">
		<constructor-arg ref="relation.roster" />
	</bean>
	<bean id="presence.pro.status.available.init.4delay" class="com.sissi.pipeline.in.presence.status.PresenceInit4DelayProcessor">
		<constructor-arg ref="offline" />
	</bean>
	<bean id="presence.pro.status.available.init.4fans" class="com.sissi.pipeline.in.presence.status.PresenceInit4FansProcessor" parent="global.pro.proxy">
		<constructor-arg ref="vcard" />
		<property name="presenceQueue" ref="broadcast.presence.self" />
	</bean>
	<bean id="presence.pro.status.available.init.4selfs" class="com.sissi.pipeline.in.presence.status.PresenceInit4SelfsProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.init" class="com.sissi.pipeline.in.presence.status.PresenceInitProcessor" />
	<bean id="presence.pro.status.available.2self.priority" class="com.sissi.pipeline.in.presence.status.PresenceOnlinePriorityProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.2self.update" class="com.sissi.pipeline.in.presence.status.PresenceOnlineUpdateProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.available.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Get presence from fans if: -->
				<!-- 1, Online, broadcast available from all resources of fans -->
				<!-- 2, Offline, broadcast unavailable with signature in VCard -->
				<ref bean="presence.pro.status.available.init.4fans" />
				<!-- Get presence from other resources of jid -->
				<ref bean="presence.pro.status.available.init.4selfs" />
				<!-- Get offline message / presence -->
				<ref bean="presence.pro.status.available.init.4delay" />
				<!-- Get presence for roster ask -->
				<ref bean="presence.pro.status.available.init.4ask" />
				<!-- Update presented -->
				<ref bean="presence.pro.status.available.init" />
				<!-- Update priority -->
				<ref bean="presence.pro.status.available.2self.priority" />
				<!-- Update status -->
				<ref bean="presence.pro.status.available.2self.update" />
				<!-- Forward presence to other resources / fans -->
				<ref bean="presence.pro.status.2selfs" />
				<ref bean="presence.pro.status.2fans" />
				<!-- Forward presence to muc -->
				<ref bean="presence.pro.status.available.muc" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.status.unavailable.vcard" class="com.sissi.pipeline.in.presence.status.PresenceOfflineVCardProcessor" parent="global.pro.proxy">
		<constructor-arg ref="vcard" />
	</bean>
	<bean id="presence.pro.status.unavailable.status" class="com.sissi.pipeline.in.presence.status.PresenceOfflineStatusProcessor" />
	<bean id="presence.pro.status.unavailable.close" class="com.sissi.pipeline.in.presence.status.PresenceOfflineCloseProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.status.unavailable.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Offline signature, experiment -->
				<ref bean="presence.pro.status.2selfs" />
				<ref bean="presence.pro.status.2fans" />
				<ref bean="presence.pro.status.unavailable.vcard" />
				<ref bean="presence.pro.status.unavailable.status" />
				<!-- Close Xmpp -->
				<!-- <ref bean="presence.pro.status.unavailable.close" /> -->
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.route" class="com.sissi.pipeline.in.presence.roster.PresenceRosterRouteProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribeProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2presence.route" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2PresenceRouteProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2presence.reply.2selfs" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2ReplySelfsProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribe.2presence.reply.2fans" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribe2ReplyFansProcessor" parent="global.pro.proxy">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.ChainedProcessor">
				<constructor-arg>
					<util:list>
						<!-- Check relation is NONE/BOTH -->
						<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribedCheckRelationProcessor" parent="global.pro.proxy">
							<constructor-arg value="true" />
						</bean>
						<!-- DB operation -->
						<ref bean="presence.pro.roster.subscribed" />
						<!-- Broadcast subscribed to all resources of fans -->
						<ref bean="presence.pro.roster.subscribed.2item" />
						<ref bean="presence.pro.roster.route" />
						<!-- Broadcast available to all resources of fans -->
						<ref bean="presence.pro.roster.subscribed.2presence" />
					</util:list>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.subscribe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- If relation is TO/BOTH -->
				<!-- 1, Response subscribed -->
				<!-- 2, Broadcast available from all resources of fans -->
				<ref bean="presence.pro.roster.subscribe.2presence.reply.2selfs" />
				<!-- If relation is From -->
				<!-- Proxy contacter subscribed -->
				<ref bean="presence.pro.roster.subscribe.2presence.reply.2fans" />
				<ref bean="presence.pro.roster.subscribe.2presence.route" />
				<!-- Same as roster.pro.establish.set -->
				<ref bean="presence.pro.roster.subscribe" />
				<!-- Same as roster.pro.establish.set.2selfs -->
				<ref bean="presence.pro.roster.subscribe.2item" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.unsubscribed" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribedProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribed2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.2presence" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribed2PresenceProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribedCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribed.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Check relation is TO/BOTH or NONE with "ask" -->
				<ref bean="presence.pro.roster.unsubscribed.check" />
				<!-- DB operation -->
				<ref bean="presence.pro.roster.unsubscribed" />
				<!-- Broadcast unsubscribed to all resources of fans -->
				<ref bean="presence.pro.roster.unsubscribed.2item" />
				<ref bean="presence.pro.roster.route" />
				<!-- Broadcast unavailable to all resources of fans -->
				<ref bean="presence.pro.roster.unsubscribed.2presence" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.subscribed" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribedProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribedCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribed2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.2presence" class="com.sissi.pipeline.in.presence.roster.PresenceRosterSubscribed2PresenceProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.subscribed.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Check relation is NONE/BOTH -->
				<ref bean="presence.pro.roster.subscribed.check" />
				<!-- DB operation -->
				<ref bean="presence.pro.roster.subscribed" />
				<!-- Broadcast subscribed to all resources of fans -->
				<ref bean="presence.pro.roster.subscribed.2item" />
				<ref bean="presence.pro.roster.route" />
				<!-- Broadcast available to all resources of fans -->
				<ref bean="presence.pro.roster.subscribed.2presence" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.unsubscribe" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribeProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.2item" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribe2ItemProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.2presence" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribe2PresenceProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.check" class="com.sissi.pipeline.in.presence.roster.PresenceRosterUnSubscribeCheckRelationProcessor" parent="global.pro.proxy" />
	<bean id="presence.pro.roster.unsubscribe.chained" class="com.sissi.pipeline.in.ChainedProcessor">
		<constructor-arg>
			<util:list>
				<!-- Check relation is TO/BOTH -->
				<ref bean="presence.pro.roster.unsubscribe.check" />
				<!-- DB operation -->
				<ref bean="presence.pro.roster.unsubscribe" />
				<!-- Synchronize to all resources for roster -->
				<ref bean="presence.pro.roster.unsubscribe.2item" />
				<ref bean="presence.pro.roster.route" />
				<!-- Broadcast unavailable to all resources -->
				<ref bean="presence.pro.roster.unsubscribe.2presence" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="presence.pro.roster.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence.roster" />
	</bean>
	<bean id="presence.pro.status.fork" class="com.sissi.pipeline.in.ForkProcessor">
		<constructor-arg ref="finder.presence.status" />
	</bean>

	<bean id="finder.presence" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.muc" />
				<ref bean="presence.condition.probe" />
				<ref bean="presence.condition.status" />
				<ref bean="presence.condition.status.forward" />
				<ref bean="presence.condition.roster" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="finder.presence.status" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.status.available" />
				<ref bean="presence.condition.status.unavailable" />
			</util:list>
		</constructor-arg>
	</bean>
	<bean id="finder.presence.roster" class="com.sissi.pipeline.in.ChainedFinder">
		<constructor-arg>
			<util:list>
				<ref bean="presence.condition.roster.subscribe" />
				<ref bean="presence.condition.roster.subscribed" />
				<ref bean="presence.condition.roster.unsubscribe" />
				<ref bean="presence.condition.roster.unsubscribed" />
			</util:list>
		</constructor-arg>
	</bean>

	<bean id="presence.condition" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.ClassMatcher">
				<constructor-arg value="com.sissi.protocol.presence.Presence" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.chained" />
	</bean>
	<bean id="presence.condition.probe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.probe.PresenceProbeMatcher" />
		</constructor-arg>
		<constructor-arg ref="presence.pro.probe.chained" />
	</bean>
	<bean id="presence.condition.status" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.PresenceActionMatcher">
				<constructor-arg>
					<array>
						<value>AVAILABLE</value>
						<value>UNAVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.fork" />
	</bean>
	<bean id="presence.condition.status.forward" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.PresenceActionMatcher">
				<constructor-arg value="true" />
				<constructor-arg>
					<array>
						<value>AVAILABLE</value>
						<value>UNAVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.forward.chained" />
	</bean>
	<bean id="presence.condition.status.available" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.PresenceActionMatcher">
				<constructor-arg>
					<array>
						<value>AVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.available.chained" />
	</bean>
	<bean id="presence.condition.status.unavailable" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.PresenceActionMatcher">
				<constructor-arg>
					<array>
						<value>UNAVAILABLE</value>
					</array>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.status.unavailable.chained" />
	</bean>
	<bean id="presence.condition.roster" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.AnyMatcher" />
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.fork" />
	</bean>
	<bean id="presence.condition.roster.unsubscribe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="unsubscribe" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.unsubscribe.chained" />
	</bean>
	<bean id="presence.condition.roster.unsubscribed" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="unsubscribed" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.unsubscribed.chained" />
	</bean>
	<bean id="presence.condition.roster.subscribed" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="subscribed" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.subscribed.chained" />
	</bean>
	<bean id="presence.condition.roster.subscribe" class="com.sissi.pipeline.in.PairCondition">
		<constructor-arg>
			<bean class="com.sissi.pipeline.in.presence.roster.PresenceRosterActionMatcher">
				<constructor-arg value="subscribe" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="presence.pro.roster.subscribe.chained" />
	</bean>

</beans>
